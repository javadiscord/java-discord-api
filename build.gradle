buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:6.25.0'
    }
}

group = 'com.javadiscord'
version = project.version

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.diffplug.spotless'

    spotless {
        java {
            importOrder()
            googleJavaFormat()
                    .aosp()
                    .reflowLongStrings()
                    .formatJavadoc(true)
                    .reorderImports(true)
                    .groupArtifact('com.google.googlejavaformat:google-java-format')
            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
        }
    }

    group = 'com.javadiscord'
    version = project.version

    tasks.withType(JavaCompile).configureEach {
        options.release = 21
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(21))
        }
    }

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    sourceSets {
        test {
            java {
                srcDirs 'src/test/integration', 'src/test/unit'
            }
        }
    }

    dependencies {
        implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
        implementation 'org.apache.logging.log4j:log4j-core:2.23.1'

        testImplementation platform('org.junit:junit-bom:5.10.2')
        testImplementation  'org.junit.jupiter:junit-jupiter'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        testImplementation 'org.mockito:mockito-core:5.11.0'
        testImplementation project(":models")
    }
}

tasks.register('bumpPatchVersion') {
    doLast {
        def versionParts = project.version.split("\\.")
        def newVersion = "${versionParts[0]}.${versionParts[1]}.${versionParts[2] as Integer + 1}"
        project.version = newVersion
        file('gradle.properties').text = "version=$newVersion"
        println "Version bumped to: $newVersion"
    }
}
tasks.register('bumpMinorVersion') {
    doLast {
        def versionParts = project.version.split("\\.")
        def newVersion = "${versionParts[0]}.${versionParts[1] as Integer + 1}.0"
        project.version = newVersion
        file('gradle.properties').text = "version=$newVersion"
        println "Version bumped to: $newVersion"
    }
}
tasks.register('bumpMajorVersion') {
    doLast {
        def versionParts = project.version.split("\\.")
        def newVersion = "${versionParts[0] as Integer + 1}.0.0"
        project.version = newVersion
        file('gradle.properties').text = "version=$newVersion"
        println "Version bumped to: $newVersion"
    }
}