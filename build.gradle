plugins {
    id 'java'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'com.javadiscord'
version = project.version

repositories {
    mavenCentral()
    maven {
        url 'https://s3-eu-west-1.amazonaws.com/gatehillsoftware-maven/releases'
    }
}

dependencies {
    implementation 'org.javassist:javassist:3.30.2-GA'

    implementation 'com.fasterxml.jackson.core:jackson-core:2.17.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'

    implementation 'com.github.mizosoft.methanol:methanol:1.7.0'

    implementation 'io.vertx:vertx-web-client:4.5.7'
    implementation 'io.vertx:vertx-core:4.5.7'

    implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'

    testImplementation platform('org.junit:junit-bom:5.10.2')
    testImplementation  'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation "io.gatehill.imposter:distro-embedded:3.38.2"
    testImplementation "io.gatehill.imposter:imposter-server:3.38.1"
    testImplementation "io.gatehill.imposter:config-dynamic:3.38.2"
    testImplementation "io.gatehill.imposter:mock-openapi:3.38.2"
}

spotless {
    java {
        target('**/java/**/*.java')
        endWithNewline()
        removeUnusedImports()
        // '\\#' = static imports, '' = everything else
        importOrder('\\#', 'java', 'javax', 'com.javadiscord', '')
        eclipse().configFile("./spotless.xml")
    }
}

tasks.register('bumpPatchVersion') {
    doLast {
        def versionParts = project.version.split("\\.")
        def newVersion = "${versionParts[0]}.${versionParts[1]}.${versionParts[2] as Integer + 1}"
        project.version = newVersion
        file('gradle.properties').text = "version=$newVersion"
        println "Version bumped to: $newVersion"
    }
}
tasks.register('bumpMinorVersion') {
    doLast {
        def versionParts = project.version.split("\\.")
        def newVersion = "${versionParts[0]}.${versionParts[1] as Integer + 1}.0"
        project.version = newVersion
        file('gradle.properties').text = "version=$newVersion"
        println "Version bumped to: $newVersion"
    }
}
tasks.register('bumpMajorVersion') {
    doLast {
        def versionParts = project.version.split("\\.")
        def newVersion = "${versionParts[0] as Integer + 1}.0.0"
        project.version = newVersion
        file('gradle.properties').text = "version=$newVersion"
        println "Version bumped to: $newVersion"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

sourceSets {
    test {
        java {
            srcDirs 'src/test/integration'
        }
    }
}